module background_small_example (
	input logic vga_clk,
	input logic [9:0] DrawX, DrawY,
	input logic blank,
	input logic [9:0] MarioX, MarioY, MarioXS, MarioYS,
	output logic [3:0] red, green, blue
);

logic [16:0] rom_address;
logic [3:0] rom_q;

logic [3:0] palette_red, palette_green, palette_blue;
logic [9:0] Mario_X_Diff, Mario_Y_Diff;

logic negedge_vga_clk;

// read from ROM on negedge, set pixel on posedge
assign negedge_vga_clk = ~vga_clk;
// get distance from laser to Mario location
assign Mario_X_Diff = DrawX - MarioX;
assign Mario_Y_Diff = DrawY - MarioY;
// address into the rom = (x*xDim)/640 + ((y*yDim)/480) * xDim
// this will stretch out the sprite across the entire screen
assign rom_address = ((DrawX * 320) / 640) + (((DrawY * 240) / 480) * 320);

always_ff @ (posedge vga_clk) begin
	red <= 4'h0;
	green <= 4'h0;
	blue <= 4'h0;
	if (blank) begin
		if(Mario_X_Diff < MarioXS && Mario_X_Diff >= 0 && Mario_Y_Diff < MarioYS && Mario_X_Diff >= 0) begin
			red <= 4'hF;
			green <= 4'h0;
			blue <= 4'h0;
		end
		else begin
			red <= palette_red;
			green <= palette_green;
			blue <= palette_blue;
		end
	end
end

background_small_rom background_small_rom (
	.clock   (negedge_vga_clk),
	.address (rom_address),
	.q       (rom_q)
);

background_small_palette background_small_palette (
	.index (rom_q),
	.red   (palette_red),
	.green (palette_green),
	.blue  (palette_blue)
);

endmodule
